Hoja de ruta - fire spread modelling

-----------
IMPORTANTE: en cpp no hay que nombrar los archivos con espacios porque
            eso genera errores.
-----------







En <spread function - starting.R>
comencé a escribir la función de propagación usando terra.
terra tiene muchas funciones piolas, particularmente adjacent,
que te indica de cuáles son las celdas vecinas de un set de celdas.

<adjacent by hand.R> hace un código de R que logra lo mismo.
La idea es escribir todo el while de propagación en c++ y usar Rcpp.

Link para aprender mucho de Rcpp:
https://teuder.github.io/rcpp4everyone_en


Pasos (2022-04-29)

00 - Escribir función adjacent en R.

01 - Escribir toda la función de propagación (de 1 solo fuego) a mano, en R,
     sin usar las funciones de terra. Eso es para poder pasarlo a Rcpp.

02 - Comparar, con R, la velocidad de distintas estrategias para propagar. (recursivo y repetitivo).
(pasos 01 y 02 en spread function - 02.R)


03 - Pasar a Rcpp y comparar nuevamente.

04 - Comparar función de propagación con Terra en R con la mejor de Rcpp.

05 - evaluar si usando arrays es más rápido o no.



------------------------------------------------

Aparentemente cpp no vectoriza (o no es trivial hacerlo), por lo que usar
código redundante no sería beneficioso.

Las opciones que quedan son considerar a las matrices como vectores o no.
Voy a escribir las dos versiones de código en R, usando puro loop, y luego
compararé en cpp. Eso en spread function - 03.R.
Aborté eso porque escribir código de R en cpp no tiene sentido. Hay cosas que se
piensan distinto en función de qué permita hacer cpp.


--------------------------------------------------------

Empiezo con rcpp en <spread function - 04_rcpp start.R>

Hay varios scripts de rcpp:

rcpp_spread_functions.cpp
	adjacent input functions (rowcol to cell, cell to row col) and
	spread function (to neighbours).
	These are available for R.

rcpp_spread_functions_nesting.cpp
	this includes the adjacent function, which calls previous
	cpp functions. Those previous functions can not be used in
	R because we have to delete the //[[Rcpp::export] line.

rcpp_spread_functions_nesting_i0.cpp
	the same, but with 0-starting-indexes.

rcpp_spread_single.cpp
	It has the complete set of functions to spread one fire, given
	the landscape, burning cells and ignition points.


---------------------------------------------------------------

2022-11-28

seguí trabajando en
rcpp_spread_functions_nesting_i0.cpp
y avancé bastante. ahí anoté los pasos siguientes.

2022-11-29

voy a copiar rcpp_spread_functions_nesting_i0.cpp


en <spread_functions_2022-11-29.cpp>,
y desde ahí seguiré mejorando ese código.


seguir testeando rowcol to cell en
spread functions testing 2022-11-29.R


//////	Notas sobre vecindad --------------------------------------

	Quizás convenga usar la GEC3 (más RAM) y precalcular todos los datos de
	vecindad.

	Pero primero voy a intentar prescindir de eso.
	Luego, debería comparar cuánto tarda en correr un fuego con
	vecinos precalculados y calculando los vecinos on the fly.



2022-12-02 -----------------------------------------------------------

Se rompió simulate_fire_cpp de
<spread_functions_2022-11-29.cpp>

Antes andaba un poco, pero las burning_cells no se actualizaban dentro del while
(volvía a su punto original.) Ahora tira otro error que aborta la sesión. En
<spread_functions_2022-11-29_debug.cpp>
intentaré arreglarlo. Pruebo creando la burning_cells al principio de cada
iteración del while.


2022-12-03

Muchos errores. Ahora no me deja subsetear bien. Quizás tenga que usar std::objects
y alargarlos con push_back().

Antes pruebo una función que use los neighbours precalculados.

sobre resize y reserve:
	https://stackoverflow.com/questions/7397768/choice-between-vectorresize-and-vectorreserve


En la parte de subsetear los neighbours hace lo siguiente, siempre
trabándose en ese lugar.

 *** caught segfault ***
address 0x55c1437df320, cause 'memory not mapped'

Creo que ya entendí. Esto pasa cuando el vecino queda fuera de rango, porque su celda
da negativo (el mínimo integer posible). Luego quiero evaluar esa celda en el vector
burn[] y demás, pero queda fuera de rango, porque las posiciones empiezan en 0.


// listo, ahora anda. Copio y limpio el script en


<spread_functions_2022-12-03.cpp>


LO QUE SIGUE

-	Hacer benchmarking contra R (quizás no es lo mejor que se puede, pero al menos
	usa terra::adjacent).

	Done. R tarda entre 200 y 800 veces lo que tarda cpp, dependiendo del tamaño del
	paisaje.

-	Comparar las estrategias en cpp con neighs precalculados y calculando on the fly.

	No se gana mucho precalculando neighbours, alrededor de un 15 %. Queda como opción
	para optimizar luego.







------------------------------------------------------------------------------------------
2022-12-13

Comenzando con cuestiones de estimación.


- sobre definición del modelo:

	Antes de pensar en un modelo con efectos aleatorios, tendría
	sentido intentar explicar más la variabilidad. En esa línea,
	pensé estas opciones...

	quizás se puedan incorporar más clases de vegetación:
		bosque seco, bosque húmedo, subalpino, matorral, estepa.
		quitar la estepa y trabajar con la zona más boscosa es una buena opción,
		sobre todo porque la estepa puede responder distinto a la precipitación.

	Meter la capa de NDVI como predictora. Sería un buen proxi del combustible,
	pero lo complicado luego es generar capas de ndvi en el modelo dinámico.
	Por ahora lo dejamos para más adelante.

	Variables climáticas: se puede confundir tiempo con espacio. Una opción
	es separarlas en dinámica y estática:
	la dinámica está estandarizada a nivel de pixel, y la estática, no, y se
	calcula como el promedio de 30 años.
	Luego habría que recalcular ambas capas con las predicciones climáticas.

	También bajar lo mismo para temperatura.

	Charlar todo esto con Thomas y Pájaro

- armar base de datos
- obtener distribución de discrepancia residual bajo parámetros conocidos
- estimar el costo de computacional del modelo a ver si hace falta optimizar
	aún más

- Probar inicialmente modelo de eff fijos con los incendios conocidos.
	ABC con gaussian process.
	Quizás usar EasyABC package

- Si está muy mal, hacer modelo jerárquico con ABC-Gibbs



--------------------------------------------------------------------------------

2024-04-16

archivos viejos dirán "wind-variable".

Ajusté las posteriores individuales con velocidad de viento variable entre
incendios, a nivel de paisaje, usando los datos diarios del ERA5. Eso muestra que 
el beta del viento tiene una relación negativa con la vel paisaje. Entonces,
para no embarrar, usaré una velocidad de viento fija en todos los fuegos.
Variará sólo la dirección.

Esto hará que todo cambie. Además, calcularé los índices de vegetación y de
topografía en R, no en GEE, de modo que un raster de variables ambientales sea
el único input necesario.

Reajustaré los índices usando exactamente los mismos datos del paper de patrones,
para que pueda citarlo. Para eso hay que editar el código de landscape_flammability.

Idealmente, automatizaré la generación de capas de viento, usando WindNinja_cli.
